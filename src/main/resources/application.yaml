spring:
  application:
    name: crypto-data
  kafka:
    bootstrap-servers: my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    listener:
      ack-mode: MANUAL
    streams:
      application-id: stream-prices
      properties:
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  data:
  #  mongodb:
  #    uri: mongodb://adminuser:password123@10.43.246.249:27017/admin
    redis:
      host: redis-service.redis.svc.cluster.local
      port: 6379
  #influx:
  #  url: http://influxdb-service.default.svc.cluster.local:8086
  #  bucket: crypto
  #  org: xavelo.com
  #  token: rRfGF0-quQ8bkjlXxaS_qzCK0VVG_-jj3h47AnndP05D_-3ElKhdI86gnyzGiikBZPn6fDt-g4oF2577BJ4RKA==
  #metrics:
  #  export:
  #    prometheus:
  #      enabled: true
  web:
    exposure:
      include: "*"
management:
  endpoints:
    web:
      exposure:
        include: "prometheus,health,info,metrics"
  endpoint:
    prometheus:
      enabled: true

logging:
  level:
    org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: INFO
    org.apache.kafka.clients: INFO
    com.xavelo.crypto.infrastructure.in.kafka.CryptoDataListener: DEBUG
    com.xavelo.crypto.infrastructure.in.kafka.CryptoPriceUpdatesListener: DEBUG

  